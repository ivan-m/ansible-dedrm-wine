---

- name: Check if Kindle certificate has been installed
  command:
    cmd: wine '{{ certMgr_path }}' -s '{{ cert_store }}'
  environment:
    # Causes issues with certificate store checking.
    #
    # Not set globally as it prevents downloading.
    NIX_SSL_CERT_FILE: None
    SSL_CERT_FILE: None
  register: cert_store_contents
  changed_when: false
  failed_when: >
    (cert_store_contents.rc != 0) or
    ('CertMgr Succeeded' not in cert_store_contents.stdout)
  when: install_kindle_certificate
  # TODO: should this only apply if the keyfile isn't present?

- set_fact:
    kindle_certificate_installed: "{{ cert_store_contents.stdout is defined and cert_name in cert_store_contents.stdout }}"
  when: install_kindle_certificate

- name: Install required certificate for Kindle
  command:
    cmd: wine '{{ certMgr_path }}' -add -c "etc/{{ cert_name }}.pem" -s '{{ cert_store }}'
  environment:
    # Causes issues with certificate store checking.
    #
    # Not set globally as it prevents downloading.
    NIX_SSL_CERT_FILE: None
    SSL_CERT_FILE: None
  register: add_cert_result
  failed_when: >
    (add_cert_result.rc != 0) or
    ('CertMgr Succeeded' not in add_cert_result.stdout)
  # Unfortunately, it isn't possible to tell - without checking the
  # certificate store again - if it _actually_ succeeded: if the path
  # to the certificate was invalid, instead it will create an empty
  # file and try to add that in :(
  when: >
    install_kindle_certificate and
    (not kindle_certificate_installed | bool)

- name: Check if keyfile already exists
  stat:
    path: "{{ kindle_keyfile }}"
  register: keyfile_check

- set_fact:
    have_keyfile: "{{ keyfile_check.stat.isreg is defined and keyfile_check.stat.isreg }}"

- set_fact:
    kindle_has_been_run: true
  when: have_keyfile | bool

- name: See if Kindle has been run/configured
  stat:
    path: "{{ kindle_data_dir }}"
  register: kindle_run_check
  when: not have_keyfile | bool

- set_fact:
    kindle_has_been_run: "{{ have_keyfile or (kindle_run_check.stat.isdir is defined and kindle_run_check.stat.isdir) }}"
  when: not have_keyfile | bool

- debug:
    msg: Please sign in to Kindle.
  when: not kindle_has_been_run | bool

- name: Run Kindle so that we can get kinfoFiles
  command:
    cmd: wine '{{ kindle_path }}'
    creates: "{{ kindle_data_dir }}"
  register: run_kindle
  # Can't rely upon checking stderr due to wine debugging messages,
  # and if the exe is found wine will just silently die.
  #
  # Unfortunately there seems to be no reliable way of telling if
  # someone actually logged in to their Amazon account.
  failed_when: >
      (run_kindle.rc != 0) or
      ('wine: cannot find' in run_kindle.stderr)
  when: not kindle_has_been_run | bool

- name: Create key file
  command:
    argv:
      - wine
      - "{{ python_exe }}"
      - "{{ dedrm_plugin_unpack_dir }}/kindlekey.py"
      - "{{ kindle_keyfile }}"
    chdir: "{{ wine_prefix }}"
    creates: "{{ kindle_keyfile }}"
  environment:
    # Make sure that Linux PYTHONPATH doesn't go in; this can cause
    # issues due to maximum path length being exceeded in wine Python.
    PYTHONPATH: None
  register: create_key
  when: not have_keyfile | bool

- name: Key extraction failure
  fail:
    msg: |
      Unable to extract key file; this may be because you didn't
      login to your Amazon account when the Kindle app launched.

      Please try manually launching the Kindle app and authenticate
      before re-running this Ansible playbook.

      Alternatively, re-run this playbook with additional debugging
      (e.g. append -vvv to the end of the commandline) and see what
      the actual error message is.
  when:
    - not have_keyfile | bool
    - "'Saved a key' not in create_key.stdout"

- name: Set wineprefix for Kindle in DeDRM
  json_patch:
    src: "{{ plugin_config_file }}"
    pretty: true
    operations:
      - op: add
        path: "/kindlewineprefix"
        value: "{{ wine_prefix }}"

- name: Read in Kindle keyfile
  slurp:
    path: "{{ kindle_keyfile }}"
  register: keyfile_contents

- set_fact:
    keyfile_contents: "{{ keyfile_contents.content | b64decode | from_json }}"

- name: Set key for Kindle in DeDRM
  json_patch:
    src: "{{ plugin_config_file }}"
    pretty: true
    operations:
      - op: add
        path: "/kindlekeys/kindlekey"
        value: "{{ keyfile_contents }}"
